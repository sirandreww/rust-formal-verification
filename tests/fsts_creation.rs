// ************************************************************************************************
// mod declaration
// ************************************************************************************************

// mod common;

// ************************************************************************************************
// test mod declaration
// ************************************************************************************************

#[cfg(test)]
mod tests {

    // ********************************************************************************************
    // use
    // ********************************************************************************************

    use rust_formal_verification::models::{AndInverterGraph, FiniteStateTransitionSystem};
    // use std::fs;

    // use crate::common;

    // ********************************************************************************************
    // aig reading test
    // ********************************************************************************************

    #[test]
    fn create_fsts_from_simple_example() {
        let aig = AndInverterGraph::from_aig_path(&"tests/simple_examples/counter.aig");
        let fsts = FiniteStateTransitionSystem::from_aig(&aig);
        assert_eq!(
            fsts.get_initial_states().to_string(),
            "((!x1) & (!x2) & (!x3))"
        );
    }
}
