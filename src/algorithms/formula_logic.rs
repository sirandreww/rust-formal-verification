// ************************************************************************************************
// use
// ************************************************************************************************

use crate::{
    formulas::{CNF},
    solvers::sat::{SatResponse, SatSolver},
};

// ************************************************************************************************
// enum
// ************************************************************************************************

// ************************************************************************************************
// struct
// ************************************************************************************************

// ************************************************************************************************
// some functions
// ************************************************************************************************

pub fn does_a_imply_b<T: SatSolver>(a: &CNF, b: &CNF) -> bool {
    // a implies b iff a implies every clause in b
    for c in b.iter() {
        let cube = !c.to_owned();
        let mut cnf_to_solve = cube.to_cnf();
        cnf_to_solve.append(&a);
        let solver = T::default();
        match solver.solve_cnf(&cnf_to_solve) {
            SatResponse::Sat { assignment: _ } => {
                return false;
            }
            SatResponse::UnSat => {}
        }
    }
    true
}
